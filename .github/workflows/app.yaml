name: micro elab server
on:
  push:
    branches: [prod]
  pull_request:
    branches: [prod]
  workflow_dispatch:
    inputs:
      version:
        description: "v1.0"
        required: true
env:
  IMAGE_NAME: elab-image-server-prod
  CONTAINER_NAME: elab-container-server-prod
jobs: 
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: yarn list

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate Keypair
        run: yarn gen:keypair
      # https://nx.dev/packages/nx/documents/run-many
      - name: Build
        run: yarn build

      - name: Test
        run: yarn test
  build_and_push:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - name: Checkout Docker Hub Repository
        uses: actions/checkout@v3
      
      # LOGIN AND PUSH IMAGE TO DOCKERHUB
      - name: Log in to DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }}  --password-stdin
      
      # https://github.com/docker/build-push-action
      - name: Cache Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ secrets.DOCKERHUB_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/$(echo $IMAGE_NAME):${{ secrets.DOCKERHUB_TAG }}
          cache-to: type=inline

      # - name: Build docker image
      #   run: docker build -t $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7) -f Dockerfile.app .
      # - name: Push docker image to DockerHub
      #   run: docker push $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)
  prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: build_and_push
    # All of error was fixed so the "continue-on-error" should be false
    continue-on-error: false
    steps:
      - name: Deploy to Digital Ocean droplet from DockerHub
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ""
          envs: IMAGE_NAME,CONTAINER_NAME,{{ secrets.DOCKERHUB_USERNAME }},{{ secrets.DOCKERHUB_PASSWORD }}, ${{ secrets.DOCKERHUB_TAG }}
          script: |
            # Login to Docker Hub
            # echo {{ secrets.DOCKERHUB_PASSWORD }} | docker login -u {{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            # Stop & Remove running container & image
            if [ "$(docker ps -a | grep -c ${{ env.CONTAINER_NAME }})" -gt 0 ]; then
            docker stop ${{ env.CONTAINER_NAME }}
            docker rm ${{ env.CONTAINER_NAME }}
            docker image prune -a -f
            echo "[---- Deleted container ${{ env.CONTAINER_NAME }}]"
            else
            echo "[---- Container with name: ${{ env.CONTAINER_NAME }}  doesn't exist. ]"
            fi
            # Pull from DockerHub
            docker pull $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)
            # Run a new container from a new image
            docker run --name ${{ env.CONTAINER_NAME }} -d -p 5000:5000 $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)